Thoughts
 - Set up of a cache (filesystem ? database ?), to not have to fetch the images on the website each time
The file system is used as a cache. Retrieved icons are stored on the system the first time around and fetched directly From the file system on subsequent calls increasing the response time.
The icons are stored with a base64 encoding of the given domain as its name in the 'favicons' folder. To fetch the file from the system the names are decoded and the corresponding files pushed to the requesting client

- If this cache was to be implemented, what strategies to update it should the icons of the website change?
	A schedule job has been implemented using the native timer setInterval(func , delay) function the delay has been set to daily.
	This job is responsible for updating the icons

- If 2 requests for the same domain are received in a short time interval, is there a way to deal with them in a smart way?
	If the icon has already been cached there should be no issue here the cached version would simply be returned, if it hasn't The following steps can be followed; 
		> First thread (initial request) stores the domain currently being processed the first 
		> Second thread (subsequent request) comes  in, checks if its name is being flagged as processing 
		> If yes, listen to a designated folder till its file exists 
		> Then return cached copy created from first request.

- How to choose the best image? Is it better to try to parallelize the different strategies or do them sequentially?
	The best image was chosen by selecting the icon with the largest bytes from a collection of icons defined in the 'link' tag
	of the domain name's 'head' element with 'rel' attribute that had value 'icon' or started with 'apple-touch-icon'. The 
	url domain_name/favicon.ico was also included in the collection.It is better to parallelize the strategies for performance reasons 

- Rate limiting (per domain, per ip?)
	> Rate limiting per domain is preferred as different ips can be related to a single domain.

- Possible architecture, if we were to scale to millions of users / requests per day...
	Possible scalling solutions;
		> Proxy Based scalling
		> Load Balancing using apache or nginx.
		The nodejs app can be deployed on various servers where traffic can be directed to using ProxyPass module in the case of apache and proxy/reverse proxy when using nginx 

	Application Based scalling
	This can be done using node_cluster, PM2. These methods distribute tasks amongst worker processes managed by a master process.
